#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Sep  22  19:21:20 2018
@author: nesma
"""
from __future__ import print_function

import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import torch.backends.cudnn as cudnn
import torchvision
import torchvision.transforms as transforms
import argparse
from torchvision import datasets
import psutil
import time
import os
import datetime

MNIST_img_rows, MNIST_img_cols = 28, 28

def MNISTargs():
      # Training settings
    parser = argparse.ArgumentParser(description='PyTorch MNIST Example')
    parser.add_argument('--batch-size', type=int, default=64, metavar='N',
                        help='input batch size for training (default: 64)')
    parser.add_argument('--test-batch-size', type=int, default=1000, metavar='N',
                        help='input batch size for testing (default: 1000)')
    parser.add_argument('--epochs', type=int, default=1, metavar='N',
                        help='number of epochs to train (default: 10)')
    parser.add_argument('--lr', type=float, default=0.01, metavar='LR',
                        help='learning rate (default: 0.01)')
    parser.add_argument('--momentum', type=float, default=0.5, metavar='M',
                        help='SGD momentum (default: 0.5)')
    parser.add_argument('--no-cuda', action='store_true', default=False,
                        help='disables CUDA training')
    parser.add_argument('--seed', type=int, default=1, metavar='S',
                        help='random seed (default: 1)')
    parser.add_argument('--log-interval', type=int, default=10, metavar='N',
                        help='how many batches to wait before logging training status')
    args = parser.parse_args()
    use_cuda = not args.no_cuda and torch.cuda.is_available()

    torch.manual_seed(args.seed)

    device = torch.device("cuda" if use_cuda else "cpu")

    kwargs = {'num_workers': 1, 'pin_memory': True} if use_cuda else {}
    return device,kwargs,args

def CIFAR10args():
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    start_epoch = 0  
    epochs= 12
    parser = argparse.ArgumentParser(description='PyTorch CIFAR10 Training')
    parser.add_argument('--lr', default=0.01, type=float, help='learning rate')
    args = parser.parse_args()
    return device, args, epochs

def MNIST_Loader(kwargs, args):
    MNIST_train_loader = torch.utils.data.DataLoader(
        datasets.MNIST('/home/nesma/Desktop/data/mydata', train=True, download=True,
                       transform=transforms.Compose([
                           transforms.ToTensor(),
                           transforms.Normalize((0.1307,), (0.3081,))
                       ])),
        batch_size=args.batch_size, shuffle=True, **kwargs)
    MNIST_test_loader = torch.utils.data.DataLoader(
        datasets.MNIST('/home/nesma/Desktop/data/mydata', train=False, transform=transforms.Compose([
                           transforms.ToTensor(),
                           transforms.Normalize((0.1307,), (0.3081,))
                       ])),
        batch_size=args.test_batch_size, shuffle=True, **kwargs)
    return MNIST_train_loader, MNIST_test_loader

def CIFAR10_Loader():
    transform_train = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
    ])

    transform_test = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
    ])
    
    CIFAR10_trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)
    CIFAR10_trainloader = torch.utils.data.DataLoader(CIFAR10_trainset, batch_size=128, shuffle=True, num_workers=2)  
    CIFAR10_testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)
    CIFAR10_testloader = torch.utils.data.DataLoader(CIFAR10_testset, batch_size=100, shuffle=False, num_workers=2)
    CIFAR10_classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')
    return CIFAR10_trainloader, CIFAR10_testloader,CIFAR10_classes


def StartMonitoring():
    process = psutil.Process(os.getpid())
    print("before memory_percent",process.memory_percent())
    print(psutil.cpu_percent(percpu=True))
    start = time.time()
    print("start",start)
    return start

def EndMonitoring(start):
    end = time.time()
    print("end", end)
    print("Time Elapsed")
    print(end - start)
    print(str(datetime.timedelta(seconds= end - start)))
    process = psutil.Process(os.getpid())
    print("after memory_percent",process.memory_percent())
    print(psutil.cpu_percent(percpu=True))  

class MNIST_ConvNet(nn.Module):
     def __init__(self):
        super(MNIST_ConvNet, self).__init__()
        self.conv1 = nn.Conv2d( 1, 32,  kernel_size=(3))
        self.conv2 = nn.Conv2d( 32, 64, kernel_size=(3, 3))
        self.conv2_drop = nn.Dropout2d()
        self.fc1 = nn.Linear(9216, 64)
        self.fc2 = nn.Linear(64, 10)
            

     def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))  
        x = F.max_pool2d(x , kernel_size= (2, 2))
        x = F.dropout(x, 0.25)
        #Flatten  
        x = x.view(x.size(0), -1)
        x= F.relu(self.fc1(x))        
        x = F.dropout(x,0.5)
        x = self.fc2(x)
        x = F.log_softmax(x)
        #log_softmax itâ€™s faster and has better numerical properties).
        return x



class CIFAR10_ConvNet(nn.Module):
    def __init__(self):
        super(CIFAR10_ConvNet, self).__init__()
        self.conv1 = nn.Conv2d( 3, 32,  kernel_size=(3))
        self.conv2 = nn.Conv2d( 32, 64, kernel_size=(3, 3))
        self.fc1 = nn.Linear(12544, 128)
        self.fc2 = nn.Linear(128, 10)
            

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))  
        x = F.max_pool2d(x , kernel_size= (2, 2))
        x = F.dropout(x, 0.25)
        #Flatten  
        x = x.view(x.size(0), -1)
        x= F.relu(self.fc1(x))    
        x = F.dropout(x,0.5)
        x = self.fc2(x)
        x = F.log_softmax(x)
        return x
    
    
    
def MNIST_train(args, model, device, train_loader, optimizer, epoch):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        #print("mydata",data)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        if batch_idx % args.log_interval == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.item()))

def MNIST_test(args, model, device, test_loader):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item() # sum up batch loss
            pred = output.max(1, keepdim=True)[1] # get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()

    test_loss /= len(test_loader.dataset)
    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))

def CIFAR10_train(epoch,criterion,optimizer,CIFAR10_trainloader,device,CIFAR10_model):
    print('\nEpoch: %d' % epoch)
    CIFAR10_model.train()
    for batch_idx, (data, targets) in enumerate(CIFAR10_trainloader):
        data, targets = data.to(device), targets.to(device)
        optimizer.zero_grad()
        outputs = CIFAR10_model(data)
        loss = criterion(outputs, targets)
        loss.backward()
        optimizer.step()
        if batch_idx % 10 == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(CIFAR10_trainloader.dataset),
                100. * batch_idx / len(CIFAR10_trainloader), loss.item()))
    
def CIFAR10_test(epoch, CIFAR10_testloader,CIFAR10_model, device,criterion):
    CIFAR10_model.eval()
    test_loss = 0
    correct = 0
    total=0
    with torch.no_grad():
        for batch_idx, (inputs, targets) in enumerate(CIFAR10_testloader):
            inputs, targets = inputs.to(device), targets.to(device)
            outputs = CIFAR10_model(inputs)
            test_loss = criterion(outputs, targets)
            test_loss += test_loss.item()
            _, predicted = outputs.max(1)
            total += targets.size(0)
            correct += predicted.eq(targets).sum().item()  
    
    test_loss /= len(CIFAR10_testloader.dataset)
    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(CIFAR10_testloader.dataset),
        100. * correct / len(CIFAR10_testloader.dataset)))
      
    
def RunCIFAR10():
    device, args, epochs = CIFAR10args()
    CIFAR10_trainloader, CIFAR10_testloader,CIFAR10_classes = CIFAR10_Loader()
    CIFAR10_model = CIFAR10_ConvNet()
    CIFAR10_model = CIFAR10_model.to(device)
    if device == 'cuda':
        CIFAR10_model = torch.nn.DataParallel(CIFAR10_model)
        cudnn.benchmark = True
        
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(CIFAR10_model.parameters(), lr=args.lr, momentum=0.5, weight_decay=5e-4)
    start = StartMonitoring()
    for epoch in range(1, epochs+1):
        CIFAR10_train(epoch,criterion,optimizer,CIFAR10_trainloader,device,CIFAR10_model)
        CIFAR10_test(epoch,CIFAR10_testloader,CIFAR10_model,device,criterion)
    EndMonitoring(start)

    
def RunMNIST():
    device, kwargs,args = MNISTargs()
    MNIST_train_loader, MNIST_test_loader = MNIST_Loader(kwargs, args)
    MNIST_model = MNIST_ConvNet().to(device)
    optimizer = optim.SGD(MNIST_model.parameters(), lr=args.lr, momentum=args.momentum)

    start = StartMonitoring()
    for epoch in range(1,args.epochs + 1):  
        MNIST_train(args, MNIST_model, device, MNIST_train_loader, optimizer, epoch)
        print("In Train")
        MNIST_test(args, MNIST_model, device, MNIST_test_loader)

    EndMonitoring(start)
        


def main():
    #RunMNIST()
    RunCIFAR10()

if __name__ == '__main__':
    main()
