#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Oct  2 13:09:13 2018

@author: nesma
"""

import tensorflow as tf
import pickle
import numpy as np
import os
import platform
from tensorflow.examples.tutorials.mnist import input_data
# Import MNIST data



# Network Parameters

def initParameters(dataset,batchSize,numClasses,epochs,learningRate,momentum,weightDecay):
    global Dataset    
    global pbatchSize
    global pnumClasses
    global pEpochs
    global pLearningRate
    global pMomentum
    global pWeightDecay
    Dataset = dataset
    pbatchSize = batchSize
    pnumClasses = numClasses
    pEpochs = epochs
    pLearningRate = learningRate
    pMomentum = momentum
    pWeightDecay = weightDecay
    

def modelMNIST(x_dict, reuse, is_training):

    with tf.variable_scope('ConvNet', reuse=reuse):

        x = x_dict['images']
        x = tf.reshape(x, shape=[-1, 28, 28, 1])

        conv1 = tf.layers.conv2d(x, 32, 5, activation=tf.nn.relu)
        conv1 = tf.layers.max_pooling2d(conv1, 2, 2)

        conv2 = tf.layers.conv2d(conv1, 64, 3, activation=tf.nn.relu)
        conv2 = tf.layers.max_pooling2d(conv2, 2, 2)

        fc1 = tf.contrib.layers.flatten(conv2)

        fc1 = tf.layers.dense(fc1, 1024)
        fc1 = tf.layers.dropout(fc1, rate=0.25, training=is_training)

        out = tf.layers.dense(fc1, 10)
    return out



# Define the model function (following TF Estimator Template)
def model_fn(features, labels, mode):

    # Build the neural network
    # Because Dropout have different behavior at training and prediction time, we
    # need to create 2 distinct computation graphs that still share the same weights.
    logits_train = modelMNIST(features, reuse=False,is_training=True)
    logits_test = modelMNIST(features, reuse=True,is_training=False)

    # Predictions
    pred_classes = tf.argmax(logits_test, axis=1)
#    pred_probas = tf.nn.softmax(logits_test)

    # If prediction mode, early return
    if mode == tf.estimator.ModeKeys.PREDICT:
        return tf.estimator.EstimatorSpec(mode, predictions=pred_classes)
#the vector of raw (non-normalized) predictions that a 
#classification model generates, which is ordinarily then passed 
#to a normalization function. 
#If the model is solving a multi-class classification problem, 
#logits typically become an input to the softmax function. 
#The softmax function then generates a vector of (normalized) probabilities with one value for each possible class.
        # Define loss and optimizer
    loss_op = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=tf.cast(labels, dtype=tf.int32)))
    global pMomentum
    global pLearningRate
    optimizer = tf.train.MomentumOptimizer(learning_rate=pLearningRate,momentum=pMomentum)
    train_op = optimizer.minimize(loss_op,global_step=tf.train.get_global_step())

    # Evaluate the accuracy of the model
    acc_op = tf.metrics.accuracy(labels=labels, predictions=pred_classes)

    # TF Estimators requires to return a EstimatorSpec, that specify
    # the different ops for training, evaluating, ...
    estim_specs = tf.estimator.EstimatorSpec(
        mode=mode,
        predictions=pred_classes,
        loss=loss_op,
        train_op=train_op,
        eval_metric_ops={'accuracy': acc_op})

    return estim_specs




    
    


def loadDataMNIST(dataset,batchSize,numClasses,epochs,learningRate,momentum,weightDecay):
    mnist = input_data.read_data_sets("/tmp/data/", one_hot=False)
    print(mnist.train.images.shape)
    print(mnist.train.labels.shape)
    print(mnist.test.images.shape)
    # Define the input function for training
    trainInput_fn = tf.estimator.inputs.numpy_input_fn(x={'images': mnist.train.images}, y=mnist.train.labels,batch_size=batchSize, num_epochs=epochs, shuffle=True)
   
    # Evaluate the Model    
    # Define the input function for evaluating
    testInput_fn = tf.estimator.inputs.numpy_input_fn(x={'images': mnist.test.images}, y=mnist.test.labels,batch_size=batchSize, shuffle=False)
    
    return trainInput_fn,testInput_fn

    



def RunMNIST(dataset,batchSize,numClasses,epochs,learningRate,momentum,weightDecay):
    initParameters(dataset,batchSize,numClasses,epochs,learningRate,momentum,weightDecay)
    # Build the Estimator
    trainInput_fn, testInput_fn= loadDataMNIST(dataset,batchSize,numClasses,epochs,learningRate,momentum,weightDecay)
    model = tf.estimator.Estimator(model_fn)

    # Train the Model
    model.train(trainInput_fn, steps=2000)
   
    # Use the Estimator 'evaluate' method
    e = model.evaluate(testInput_fn)
    print("Testing Accuracy:", e['accuracy'])



    
def runModel(dataset,batchSize=128,numClasses=10,epochs=12,learningRate=0.01,momentum=0.5,weightDecay=1e-6):
    
    RunMNIST(dataset,batchSize,numClasses,epochs,learningRate,momentum,weightDecay)
    


def main():
    runModel("mnist",epochs=3)

  
if __name__ == '__main__':
        main()
        
        
        
        
